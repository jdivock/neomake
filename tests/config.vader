Include: include/setup.vader

Execute (neomake#config#get_setting: basic):
  Save g:neomake
  new

  AssertEqual neomake#config#get_setting('foo', 'default'), 'default'
  let g:neomake = {}
  AssertEqual neomake#config#get_setting('foo', 'default'), 'default'
  let g:neomake = {'foo': 'global'}
  AssertEqual neomake#config#get_setting('foo', 'default'), 'global'
  let b:neomake = {}
  AssertEqual neomake#config#get_setting('foo', 'default'), 'global'
  let b:neomake = {'foo': 'buffer'}
  AssertEqual neomake#config#get_setting('foo', 'default'), 'buffer'

  let maker = {'foo': 'maker'}
  let jobinfo = {'maker': maker}
  Log 1
  AssertEqual neomake#config#get_setting('foo', 'default', jobinfo), 'buffer'
  unlet b:neomake
  AssertEqual neomake#config#get_setting('foo', 'default', jobinfo), 'global'
  unlet g:neomake
  AssertEqual neomake#config#get_setting('foo', 'default', jobinfo), 'maker'
  let jobinfo.maker = {}
  AssertEqual neomake#config#get_setting('foo', 'default', jobinfo), 'default'

  bwipe

Execute (neomake#config#get_setting with filetypes):
  Save g:neomake
  new

  set filetype=myft

  AssertEqual neomake#config#get_setting('foo', []), []
  let g:neomake = {'foo': ['maker1']}
  AssertEqual neomake#config#get_setting('foo', 'default'), ['maker1']

  let g:neomake = {'ft:myft': {'foo': ['myft_maker']}}
  AssertEqual neomake#config#get_setting('foo', 'default'), ['myft_maker']

  bwipe
